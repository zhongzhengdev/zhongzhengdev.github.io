<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.deepzero.cn/"/>
  <updated>2019-10-26T03:47:42.000Z</updated>
  <id>http://www.deepzero.cn/</id>
  
  <author>
    <name>二三</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UML类图简单介绍</title>
    <link href="http://www.deepzero.cn/2019/10/26/UML%E7%B1%BB%E5%9B%BE%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.deepzero.cn/2019/10/26/UML类图简单介绍/</id>
    <published>2019-10-26T03:47:42.000Z</published>
    <updated>2019-10-26T03:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;&emsp;&emsp;在读源码的过程之中经常会被各种类弄的晕头转向，合理使用UML图可以帮助我理清楚各个类之间的关系，由于之前对UML图使用的不是很频繁久而久之就不熟练了，所以通过记录这篇文章重新复习一下。</p><hr><p>&emsp;&emsp;&emsp;UML图有很多种类，例如：类图、对象图、组件图、部署图、交互图、状态图、用例图等，而且还可以继续细分，例如交互图可以分为：时序图(顺序图、序列图)和协作图。五花八门的各种图也会弄的晕头转向，平时在学习中主要使用了类图和时序图，所以会写两片文章进行记录，今天先简单记录类图。</p><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h4 id="什么是类图？"><a href="#什么是类图？" class="headerlink" title="什么是类图？"></a>什么是类图？</h4><p>&emsp;&emsp;&emsp;类图（Class Diagram）主要是用来显示系统中的类、接口以及它们之间的静态结构和关系的一种静态模型。类图是面向对象系统建模中最常用和最重要的图，是定义其它图的基础。</p><h4 id="类图有哪些作用？"><a href="#类图有哪些作用？" class="headerlink" title="类图有哪些作用？"></a>类图有哪些作用？</h4><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h4 id="类图的样式"><a href="#类图的样式" class="headerlink" title="类图的样式"></a>类图的样式</h4><p>下面这张图就是UML中表示一个类的图形：<br><img src="https://github.com/zhongzhengdev/tuchuang/blob/master/UML%E7%B1%BB%E5%9B%BE/%E7%B1%BB%E5%9B%BE%E6%A0%B7%E5%BC%8F.png?raw=true" alt="类图样式"></p><p>&emsp;&emsp;&emsp;通过将一个大矩形从上而下分割为3个小矩形表示一个类，第一个矩形表示类名(Person)，第二个矩形表示类的属性，这个属性的表达有特定的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">权限 属性名:类型 [=默认值]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;由于定义的Person类中的name和age为私有属性，所以权限用 <strong>-</strong>(减号)来表示，此外还有 <strong>+</strong> 代表public权限、<strong>#</strong> 代表protected权限、<strong>~</strong> 代表default权限。默认值可以直接在类型后面拼接”=某个值”来表示，假如给age属性赋予初始值23，则完整的表达式为: <strong>- age:int = 23</strong>。<br>第三个矩形表示类中的方法（如下图），跟属性的格式差不多，这里就不一一赘述了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">权限 方法(参数名:参数类型):类型 [=返回类型]</span><br></pre></td></tr></table></figure><hr><h2 id="类图有几种关系？"><a href="#类图有几种关系？" class="headerlink" title="类图有几种关系？"></a>类图有几种关系？</h2><p>类图有6中关系，分别是：</p><ul><li><strong>泛化</strong></li><li><strong>实现</strong></li><li><strong>依赖</strong></li><li><strong>关联</strong></li><li><strong>聚合</strong></li><li><strong>组合</strong></li></ul><p>用一个公式来表达上面几种关系的强弱性(由强到弱)的话应该是：<strong>泛化=实现&gt;组合&gt;聚合&gt;关联&gt;依赖</strong>。</p><hr><p>接下来分别对以上6种关系进行讲解：</p><ol><li><strong>泛化（Generalization）</strong>：<br>&emsp;&emsp;&emsp;泛化关系也就是Java中的继承，表示了子类与父类之间的关系。在UML类图中将两个类通过一个空心闭合箭头和一条实线链接起来表示泛化关系，如下图：</li></ol><p><img src="https://github.com/zhongzhengdev/tuchuang/blob/master/UML%E7%B1%BB%E5%9B%BE/%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB.png?raw=true" alt="泛化关系"><br>2. <strong>实现（Realization）</strong>：<br>&emsp;&emsp;&emsp;实现关系在Java中就是一个实现一个接口类或者抽象类。在UML类图中通过一个空心闭合箭头和一条虚线将两个类链接起来表示实现关系，如下图：</p><p><img src="https://github.com/zhongzhengdev/tuchuang/blob/master/UML%E7%B1%BB%E5%9B%BE/%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB.png?raw=true" alt="实现关系"></p><ol start="3"><li><strong>依赖（Dependency）</strong>：<br>&emsp;&emsp;&emsp;在UML类图中使用一个非闭合箭头加一条虚线表示两个类的依赖关系，箭头指向的类为被依赖方。依赖关系表示一个类C1的某个功能完成必须需要另一个类C2的支持，依赖是一种弱关系也可以说是一种偶然的关系。通俗点就是“在类中某个方法中偶然使用到了其他类，但是现实中没有必然关系”，例如学生或水果刀，学生和水果刀本来是没有关系的，但是当学生削苹果时就必须需要使用水果刀这个类，这两者就是一种偶然的关系也就是依赖关系。</li></ol><p><img src="https://github.com/zhongzhengdev/tuchuang/blob/master/UML%E7%B1%BB%E5%9B%BE/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png?raw=true" alt="依赖关系"></p><ol start="4"><li><p><strong>关联（Association）</strong>：<br>&emsp;&emsp;&emsp;关联关系表示一种强关系，关系比较稳定。在UML类图中使用实线加非闭合箭头方式表明。关联关系分为两种：单向关联和双向关联。单向关联可以理解为类C1知道类C2的存在，但是反过来不成立。例如学生和家的关系，学生知道有家这个类，但是家这个类不一定知道有学生这个关系，因为并不是每个家里都有学生。那么双向关联就是类C1知道类C2的存在，同时类C2也知道C1的存在。例如学生和老师的关系，学生肯定有老师，老师也肯定有学生。<br><img src="https://github.com/zhongzhengdev/tuchuang/blob/master/UML%E7%B1%BB%E5%9B%BE/%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB.png?raw=true" alt="关联关系"></p></li><li><p><strong>聚合（Aggregation）</strong>：<br>&emsp;&emsp;&emsp;聚合关系强调的是一种整体和部分的关系，其中部分脱离整体后可以单独存在。在UML类图中使用实线加一个空心菱形表示，菱形接触的类为整体类。例如学生和笔的关系就是聚合关系，学生日常写作业都离不开笔，但是笔可以离开学生后也可以单独存在。<br><img src="https://github.com/zhongzhengdev/tuchuang/blob/master/UML%E7%B1%BB%E5%9B%BE/%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB.png?raw=true" alt="聚合关系"></p></li><li><p><strong>组合（Composition）</strong>：<br>&emsp;&emsp;&emsp;组合关系同样是强调整体和部分的关系，不同于聚合关系的是组合关系中部分脱离整体无法独自存在。在UML类图中使用实线加一个实心菱形表示，菱形接触的类为整体类。例如学生和身体部位手的关系，学生离不开手这个身体部位，同样身体部位手离开人体后也无法单独存在。</p></li></ol><p><img src="https://github.com/zhongzhengdev/tuchuang/blob/master/UML%E7%B1%BB%E5%9B%BE/%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB.png?raw=true" alt="组合关系"></p><hr><h3 id="结合以上6种关系并且给出的UML类图样式，可以通过以下图片来描述一个完整的类关系："><a href="#结合以上6种关系并且给出的UML类图样式，可以通过以下图片来描述一个完整的类关系：" class="headerlink" title="结合以上6种关系并且给出的UML类图样式，可以通过以下图片来描述一个完整的类关系："></a>结合以上6种关系并且给出的UML类图样式，可以通过以下图片来描述一个完整的类关系：</h3><p><img src="https://github.com/zhongzhengdev/tuchuang/blob/master/UML%E7%B1%BB%E5%9B%BE/%E6%95%B4%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BE.png?raw=true" alt="整体关系"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&amp;emsp;在读源码的过程之中经常会被各种类弄的晕头转向，合理使用UML图可以帮助我理清楚各个类之间的关系，由于之前
      
    
    </summary>
    
    
      <category term="项目" scheme="http://www.deepzero.cn/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="UML" scheme="http://www.deepzero.cn/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>try-with-resources 语法使用</title>
    <link href="http://www.deepzero.cn/2019/10/25/try-with-resources-%E8%AF%AD%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.deepzero.cn/2019/10/25/try-with-resources-语法使用/</id>
    <published>2019-10-25T05:03:35.000Z</published>
    <updated>2019-10-25T05:03:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>&emsp;&emsp;读MyBatis源码的时候，发现了代码中使用以下方法来开启sqlSession，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">      <span class="keyword">final</span> AutoConstructorMapper mapper = sqlSession.getMapper(AutoConstructorMapper.class);</span><br><span class="line">      <span class="keyword">final</span> Object subject = mapper.getSubject(<span class="number">1</span>);</span><br><span class="line">      assertNotNull(subject);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;之前进行Java代码的编写时，只知道try结合catch和finally关键字进行对异常的捕捉和处理，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//业务代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  <span class="comment">//异常处理</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>&emsp;&emsp;从未使用过 <strong>try(){}</strong> 这种用法。心里有这个疑惑肯定是要解开的，既然是在MyBatis中发现的这个问题所以当然要从MyBatis入手。果不其然在MyBatis的官方文档中的<a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">作用域（Scope）和生命周期</a>这个章节中发现了这个用法的使用。</p><blockquote><p><strong>SqlSession</strong><br>&emsp;&emsp;每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，要考虑 SqlSession 放在一个和 HTTP 请求对象相似的作用域中。 换句话说，每次收到的 HTTP 请求，就可以打开一个 SqlSession，返回一个响应，就关闭它。 这个关闭操作是很重要的，你应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。 下面的示例就是一个确保 SqlSession 关闭的标准模式：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  <span class="comment">// 你的应用逻辑代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过上面这段话可以知道：每当接收一个请求时，可以打开一个sqlSession进行处理，处理完成后要及时的进行关闭操作。然后列举了一个使用 <strong>try(){}</strong> 语法对sqlSession的代码示例。也就是说使用 <strong>try(){}</strong> 语句将sqlSession的作用范围进行了限制，使其在完成 <strong>{}</strong> 中的相应的操作后及时进行关闭。<br>文档中的描述仅让我对 <strong>try(){}</strong> 的作用有了一个猜想：</p><h5 id="1-为了限定作用域。"><a href="#1-为了限定作用域。" class="headerlink" title="1. 为了限定作用域。"></a>1. 为了限定作用域。</h5><h5 id="2-关闭操作。"><a href="#2-关闭操作。" class="headerlink" title="2. 关闭操作。"></a>2. 关闭操作。</h5><hr><p>&emsp;&emsp;要想真正的弄明白这个语法的实际含义还需要进行更多的查询，既然是Java的写法，接下来Java文档中总该有对这个语法的介绍吧。于是在搜索引擎中输入“try()”这个关键字，很容易的就能查找到在Java文档中有对这个语法的介绍：<a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" target="_blank" rel="noopener">The try-with-resources Statement</a>，接下来就针对文档中的内容以及自己的理解进行一下总结。</p><hr><h2 id="什么是try-with-resources语法"><a href="#什么是try-with-resources语法" class="headerlink" title="什么是try-with-resources语法?"></a>什么是try-with-resources语法?</h2><p>&emsp;&emsp;首先要知道这个语法是从JDK7以后才有的。这个语法的解释可以概括为：try-with-resources是一个可以声明一个或者多个资源并且可以确保在语句结束时关闭每个资源的语法。</p><p>&emsp;&emsp;针对以上的解释问题又来了，解释中提到的资源是什么意思呢？根据Java文档中给出的解释：<strong>resources指的就是程序处理完成后必须关闭的对象</strong>，那什么样的对象才能被关闭呢？文档中给出的解释是：<strong>任何一个实现了java.lang.AutoCloseable和java.io.Closeable接口的对象都可以称作为resources</strong>。起初我对这个解释有点怀疑，然后查看了一下最开始的MyBatis中的SqlSession这个类，果然是继承了Closeable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.ibatis.session;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The primary Java interface for working with MyBatis.</span></span><br><span class="line"><span class="comment"> * Through this interface you can execute commands, get mappers and manage transactions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSession</span> <span class="keyword">extends</span> <span class="title">Closeable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>然后又查看了一下Java IO中的Writer.class和Reader.class，同样的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Reader</span> <span class="keyword">implements</span> <span class="title">Readable</span>, <span class="title">Closeable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.io;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Writer</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">Closeable</span>, <span class="title">Flushable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>截止到这我知道了它的意思，但是为什么这么用呢？是不是真的跟我的猜想一样呢？</p><hr><h1 id="为什么这么用？"><a href="#为什么这么用？" class="headerlink" title="为什么这么用？"></a>为什么这么用？</h1><h4 id="1-代码简洁"><a href="#1-代码简洁" class="headerlink" title="1. 代码简洁"></a>1. 代码简洁</h4><p>&emsp;&emsp;上边的介绍让我知道了什么是try-with-resources语法，但是这么写的好处是什么？首先需要明确的是try-with-resources语句其实是一个语法糖而并不是jvm新增的功能。既然是语法糖我们就能想到它有一个好处就是代码简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"file"</span>));</span><br><span class="line">        System.out.println(inputStream.read());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"file"</span>))) &#123;</span><br><span class="line">        System.out.println(inputStream.read());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边两段代码中第一段是我之前经常见过写过的代码，第二段是使用了try-with-resources语法的，一眼见过去就简洁了不少。</p><h4 id="2-异常更明确"><a href="#2-异常更明确" class="headerlink" title="2. 异常更明确"></a>2. 异常更明确</h4><p>&emsp;&emsp;使用try-with-resource时，如果对资源的处理和对资源的关闭均出现了异常时，“关闭异常”将被抑制，“处理异常”将被抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">readFirstLineFromFileWithFinallyBlock</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="keyword">null</span>) br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面这段代码如果在使用时try块中和finally块中同时出现了异常，被抛出的将会是finally块引发的异常，而try块中出现的异常会被抑制。而使用try-with-resources语法进行处理的话，结果是不一样的。下面的代码块中使用了try-with-resources语法，如果同时出现了异常，try块中的异常将会被抛出而try-with-resources块中异常会被抑制。需要注意的是这里所说的抑制并非丢弃而是存放在“处理异常”的异常列表中。可以通过调用Throwable.getSuppressed方法来检索这些受抑制的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">readFirstLineFromFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path))) &#123;</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h4 id="1-在JDK7及更高级的版本中可以使用try-with-resources进行对资源的关闭，可以让代码更加简洁。"><a href="#1-在JDK7及更高级的版本中可以使用try-with-resources进行对资源的关闭，可以让代码更加简洁。" class="headerlink" title="1. 在JDK7及更高级的版本中可以使用try-with-resources进行对资源的关闭，可以让代码更加简洁。"></a>1. 在JDK7及更高级的版本中可以使用try-with-resources进行对资源的关闭，可以让代码更加简洁。</h4><h4 id="2-将对象作用域进行限定，使用完成后也可以不用硬编码的对资源进行关闭。"><a href="#2-将对象作用域进行限定，使用完成后也可以不用硬编码的对资源进行关闭。" class="headerlink" title="2. 将对象作用域进行限定，使用完成后也可以不用硬编码的对资源进行关闭。"></a>2. 将对象作用域进行限定，使用完成后也可以不用硬编码的对资源进行关闭。</h4><h4 id="3-使用try-with-resources编写代码时可以更加准确的定位和处理异常。"><a href="#3-使用try-with-resources编写代码时可以更加准确的定位和处理异常。" class="headerlink" title="3. 使用try-with-resources编写代码时可以更加准确的定位和处理异常。"></a>3. 使用try-with-resources编写代码时可以更加准确的定位和处理异常。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;读MyBatis源码的时候，发现了代码中使用以下方法来开启sqlSession，代码如下：&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
      <category term="Java" scheme="http://www.deepzero.cn/categories/Java/"/>
    
    
      <category term="语法使用" scheme="http://www.deepzero.cn/tags/%E8%AF%AD%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
</feed>
